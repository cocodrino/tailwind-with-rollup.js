const isVariant = name => selector => {
  return selector.startsWith(`${name}:`);
};

const addSelector = name => (tailwind, state, selector) => {
  const nameWithoutVariant = selector.split(":")[1];
  return { ...state,
    [`:${name}`]: { ...state[`:${name}`],
      ...tailwind[`.${nameWithoutVariant}`]
    }
  };
};

const addMediaSelector = (tailwind, state, selector, config) => {
  const [size, nameWithoutMedia] = selector.split(":");
  const media = `@media (min-width: ${config.screens[size]})`;
  return { ...state,
    [media]: { ...state[media],
      ...tailwind[`.${nameWithoutMedia}`]
    }
  };
};

export const processSelectors = (tailwind, config, selectors) => {
  let state = {};
  const processSelector = [{
    isRightSelector: selector => !selector.includes(":"),
    addToState: (tailwind, state, selector) => ({ ...state,
      ...tailwind[`.${selector}`]
    })
  }, {
    isRightSelector: (selector, {
      screens
    }) => {
      return Object.keys(screens).some(screen => selector.startsWith(`${screen}:`));
    },
    addToState: addMediaSelector
  }, {
    name: "hover"
  }, {
    name: "focus"
  }, {
    name: "active"
  }, {
    name: "group-hover"
  }, {
    name: "focus-within"
  }];

  for (const name of selectors) {
    for (const rule of processSelector) {
      const isRightSelector = rule.name ? isVariant(rule.name) : rule.isRightSelector;
      const addToState = rule.name ? addSelector(rule.name) : rule.addToState;

      if (isRightSelector(name, config)) {
        state = addToState(tailwind, state, name, config);
        break;
      }
    }
  }

  return state;
};